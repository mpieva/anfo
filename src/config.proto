//    Copyright 2009 Udo Stenzel
//    This file is part of ANFO
//
//    ANFO is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Anfo is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Anfo.  If not, see <http://www.gnu.org/licenses/>.

package config ;

message Homolog {
    optional string genome = 1 ;
    optional string sequence = 2 ;

    // start of alignment, negative if RC'd
    required int32 start = 3 ;

    // cigar codes to reproduce the alignment
    repeated uint32 cigar = 4 ;
}

message Contig {
    // number of half-bytes to seek into the genome file to get to the
    // start of the contig
    required uint32 offset = 1 ;
	
    // start of the contig in the original sequence, 0-based
    required uint32 range_start = 2 ;

    // one-past-the-end of the contig in original sequence, 0-based
    required uint32 range_end = 3 ; 

    // aligned homologs, if available
    // (This is intended for artificial genomes that result from
    // alignments, here we store information to recreate those
    // alignments.)
    repeated Homolog homolog = 4 ;
}

message Sequence {
    // sequence name (first word of header in FASTA file)
    required string name = 1 ;

    // description of sequence (rest of header in FASTA file)
    optional string description = 2 ;

    // contigs (stretches without many Ns)
    repeated Contig contig = 3 ;

    // taxonomic id, if known and different from enclosing genome
    optional uint32 taxid = 6 ;
}

message Genome {
    // handle for the genome, used to report matches and to look up genome files
    optional string name = 1 ;

    // description of the genome (most likely from command line)
    optional string description = 3 ;

    // sequences (typically one per chromosome)
    repeated Sequence sequence = 4 ;

    // total length in nucleotides, essentially the file size
    required uint32 total_size = 5 ;

    // taxonomic id, if known and applies to whole genome
    optional uint32 taxid = 6 ;

    // maximum number of contiguous Ns; more constitute a gap
    optional uint32 maxn = 7 ;
}

message CompactIndex {
    // file name of the indexed genome
    required string genome_name = 2 ;

    // length of words (the k in k-mer)
    required uint32 wordsize = 3 ;

    // cutoff for overrepresented k-mers, if absent, all k-mers are
    // indexed
    optional uint32 cutoff = 4 ;

    // total number of indexed k-mers (nearly equal to genome size
    // in the absence of a cutoff)
    optional uint32 indexsize = 5 ;

    // stride if not every word is indexed
    optional uint32 stride = 6 [default=1] ;

    // list of gap positions in genome
    repeated uint32 gap = 7 [ packed=true ] ;
}

message CompactIndexSpec {
    required string name = 2 ;
    optional uint32 cutoff = 4 ;
    optional uint32 wordsize = 3 ;
    optional uint32 stride = 6 ;

    // number of mismatches to allow per seed
    // Only values of 0, 1 or 2 are currently supported, and more
	// probably doesn't make any sense.
    optional uint32 allow_near_perfect = 5 [ default = 0 ] ;
}

// Configuration of mapper/aligner for a subset of sequences.  The idea
// is to use every policy that matches a given sequence, merging them in
// the order they appear in the configuration(s)
message Policy {
    // applies to sequences of this minimum length
    optional uint32 minlength = 1 ;

    // applies to sequences of this maximum length
    optional uint32 maxlength = 2 ;

    // use these indexes
    repeated CompactIndexSpec use_compact_index = 3 ;

    // don't bother aligning if there are too many seeds
    optional uint32 repeat_threshold = 4 ;

    // minimum total length of combined seeds to make an alignment
    optional uint32 min_seed_len = 7 ; 

    // pattern to match names against
    optional string name_pattern = 9 ;

	optional uint32 max_mismatches_in_seed = 10 [ default = 0 ] ;
}

message Aligner {
    // rate of transversions, basically defines the mismatch penalty
    required float rate_of_transversions = 1 ;

    // rate of transitions, defaults to tranversion rate
    optional float rate_of_transitions = 2 ;

    // probability of a gap appearing, efectively defines the gap-open-penalty
    // defaults to gap-extension-penalty to yield linear gap costs
    optional float gap_open_rate = 3 ;

    // probability of a gap extension
    required float gap_extension_rate = 4 ;

    // deamination rate, double stranded
    optional float rate_of_ds_deamination = 5 [default = 0.0] ;
    
    // deamination rate, single stranded
    optional float rate_of_ss_deamination = 6 [default = 0.0] ;

    // mean overhang length
    // at each end of a read we say there's half a chance that it has an
    // overhang in the right (detectable) direction, and if so, the length is
    // geometrically distributed with a suitable parameter
    // if left out, no overhangs are produced
    optional float mean_overhang_length = 7 ;

    // distance cutoff scaled by 1000
    // (need to add an E-Value cutoff at some point)
    optional uint32 max_penalty_per_nuc = 8 [ default = 15 ] ;

    optional uint32 max_mapq = 9 [ default = 254 ] ;
}


// Configuration messages are both read from a file to configure the program
// and written as a kind of header to the output to leave an audit trail.
message Config {
    // rules to select indices
    repeated Policy policy = 3 ;

    // aligner configuration
    // This is in fact required, because practically all tools rely on it
    // being present anyway.  Configuration of different aligners is
    // currently not supported anyway.
    optional Aligner aligner = 4 ;

    // trimming configuration: sequences to look for and kill off
    // We look for the given sequence, which may overlap the read
    // sequence or be contained within it.  If the overlap is good
    // enough, it is cut off.  We can do this on the 3' end (adapters)
    // or the 5' end (strange artefacts).  Trimming is done before
    // indexing.
    repeated string trim_right = 5 ;
    repeated string trim_left  = 6 ;

	// minimum score needed for something to be trimmed.  default should
	// be fine
	optional uint32 min_trim_score = 7 [ default = 4 ] ;
}

// :vim:expandtab:ts=4:sw=4:cindent:

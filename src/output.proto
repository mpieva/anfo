//    Copyright 2009 Udo Stenzel
//    This file is part of ANFO
//
//    ANFO is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Anfo is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Anfo.  If not, see <http://www.gnu.org/licenses/>.

package output ;

option optimize_for = SPEED ;
import "config.proto" ;

message Header {
    // program version string
    required string version = 1 ;

    // file format version, in case incompatible changes are introduced
    optional uint32 file_version = 8 [ default = 1 ] ;

    // copy of the config block used in the run
    required config.Config config = 2 ;

    // index of first processed input, if input is sliced
    // multiple starts are possible after merging multiple outputs
    repeated uint32 sge_slicing_index = 3 ;

    // number of slices if input is sliced
    optional uint32 sge_slicing_stride = 4 [ default=1 ] ;

    // copy of command line
    repeated string command_line = 5 ;

    // to ease tracking of problems: grid engine job id and task id, if
    // available
    optional uint32 sge_job_id = 6 ;
    optional uint32 sge_task_id = 7 ;

    // indicates whether an output file is sorted by read name
    // (useful to merge files?)
    optional bool is_sorted_by_name = 15 [default=false] ;

	// indicates whether an output file is sorted by genome coordinate,
	// and if so, which genomes were used in what order (that is target
	// sequence name, then earliest matching position, then alignment
	// length; needed for consensus calling and merging)
    repeated string is_sorted_by_coordinate = 13 ;

    // old way to encode sorting, don't use
    optional bool was_sorted_by_coordinate = 14 [default=false] ;
	optional bool is_sorted_by_all_genomes = 12 [default=false] ;
}

// XXX: a few easily accessible statistics could be included here,
// assuming the footer is somehow easily found.  Requires a bit more
// infrastructure, though.  While we're at it, an index would be well
// placed here, too.
message Footer {
	required uint32 exit_code = 1 ;
}

// Result hits... all very ad-hoc and ugly.  We need:
// - best hit globally
// - score of best hit globally with different species
// - score of best hit globally with different order

// - best hit to some genome (usually, but not always human or
//   human/chimp hybrid)
// - score of second best hit to said genome
// - score of best hit to said genome, but different chromosome
// - if best is on sex chromosomes, score of best hit on same genome
//   outside sex chromosomes

// deprecated, don't touch
message OldHit {
    // globally unique name of the genome (used when sorting hits be
    // coordinate, can be used to locate the reference sequence if
    // present; if absent, the sequence name should be globally unique)
    optional string genome_name = 8 ;

    // name of the subject sequence (== chromosome or similar)
    required string sequence = 2 ;

    // minimum position where any nucleotide aligns, zero-based
    // This is the position of the 5'-most base if on the forward
    // strand, the position of the 3'-most based if on the reverse strand
    required uint32 start_pos = 3 ;

    // length of alignment on reference sequence, negative if on the
    // reverse strand
    required sint32 aln_length = 4 ;

    // Score (this is actually a penalty)
    required sint32 score = 5 ;

    // E-value (because it's customary to have one)
    optional float evalue = 6 ;

    // alignment as (binary equivalent of) a CIGAR line
    // Bytes 1..127 encode matches of 1..127nt, 129..191 is an insert of
    // 1..63nt, 193..255 a deletion of 1..63nt.  A NUL byte is a marker
    // for the place where the alignment started, bytes 128 and 192 are
    // reserved.
    required bytes cigar = 7 ;

    // taxids if known: most specific, species and order
    // An absent taxid means it's not known.
    optional int32 taxid = 16 ;
    optional int32 taxid_species = 17 ;
    optional int32 taxid_order = 18 ;

    // The alignment itself as pair of strings, along with a CLUSTAL
    // style "conservation" line.  This is not normally stored in a
    // file, it is generated from the CIGAR line; but it's cool to have
    // for human readable output.
    optional string ref = 32 ;
    optional string qry = 33 ;
    optional string con = 34 ;
}

enum Reason {
    // ordinary alignment
    aligned = 0 ;

    // couldn't align because there was no seed at all
    no_seeds = 1 ;

    // decided not to align because there were too many seeds
    too_many_seeds = 2 ;

    // all alignments exceeded the e-value or score cutoff
    bad_alignment = 3 ;

    // no policy how to align, therefore no alignment
    no_policy = 4 ;

    // only repetitive seeds
    repeats_only = 5 ;
}

// deprecated, don't use if possible
message OldResult {
    // sequence identifier, can be left out iff it is implicit, e.g.
    // from being contained in a database where the id is the key
    optional string seqid = 1 ;

    // optional description (taken e.g. from FASTA file)
    optional string description = 13 ;

    // quality scores (Phred scale, raw, without silly offsets)
    optional bytes quality = 14 ;

    // the sequence itself, if so desired (ASCII encoding---do we want
    // something more compact?)
    required string sequence = 2 ;

    // index of first base that's not trimmed from 5' end
    optional uint32 trim_left = 11 [ default = 0 ] ;

	// index of first base that is trimmed from 3' end
	// Note that the part trimmed from the 5' end still counts for this
	// index.  If absent, nothing was trimmed from the 3' end.
    optional uint32 trim_right = 12 ;

    // Reason we arrived at this result
    optional Reason reason = 10 [ default = aligned ] ;

    // Some statistics about the seeding process
    optional uint32 num_raw_seeds = 16 ;
    optional uint32 num_grown_seeds = 17 ;
    optional uint32 num_clumps = 18 ;
    optional uint32 num_useless = 22 ;

    // Some statistics about the alignment process
    optional uint32 open_nodes_after_alignment = 19 ;
    optional uint32 closed_nodes_after_alignment = 20 ;
    optional uint32 tracked_closed_nodes_after_alignment = 21 ;

    // Best hit globally, if any.  Difference in bit score to the next
    // best one with different species, with different order, iff such
    // hits exist.
    optional OldHit best_hit = 3 ;
    optional sint32 diff_to_next_species = 4 ;
    optional sint32 diff_to_next_order = 5 ;

    // Best hit to some selected genome (probably human), if any.
    // Difference in bit score to next best hit, to next best on
    // different chromosome, to next on different class of chromosomes,
    // if they exist.  Classes for this purpose are sex chromosomes,
    // autosomes and organelles.
    optional OldHit best_to_genome = 6 ;
    optional sint32 diff_to_next = 7 ;
    optional sint32 diff_to_next_chromosome = 8 ;
    optional sint32 diff_to_next_chromosome_class = 9 ;

    // if this result is the consensus of multiple reads, those reads
    // can go here
    repeated Read member = 23 ;
}

message Read {
    // sequence identifier
    required string seqid = 1 ;

    // optional description (taken e.g. from FASTA/FASTQ file)
    optional string description = 13 ;

    // the sequence itself, if so desired (ASCII encoding---do we want
    // something more compact?)
    required string sequence = 2 ;

    // quality scores (Phred scale, raw, without silly offsets)
	// also: min_lk in the sense iof GLF when applicable
    optional bytes quality = 14 ;

    // likelihoods of consensus sequence
	// This is intended to resemble the GL format or at least allow
	// generation of GLF.  For each position in the sequence, we store
	// either 0, 4 or 10 likelihood ratios (for haploid/diploid genomes)
	// as specified for GLF.  Each entry is as long as the sequence, the
	// order of the entries is [AA,CC,GG,TT,AC,AG,AT,CG,CT,GT].  
	// Bytes should be sufficient for storage, since we clamp almost
	// everything at 254 anyway.
    repeated bytes likelihoods = 15 ;

    // raw counts of what base was seen in a position
    // Not needed or useful for GLF, but useful to retain 'just in
    // case'.  Length must equal 4*(length sequence), treated as 2D
    // array, inner index is [A,C,G,T].
    repeated uint32 seen_bases = 16 [packed=true] ;

    // total depth at each position
    // Coverage at each position is the sum of bases A,C,G,T and gaps.
    // Length is supposed to equal (length sequence).
    repeated uint32 depth = 17 [packed=true] ;

    // number of bases trimmed at 5' (at 3') end if trimming was done
    optional uint32 trim_left = 11 ;
    optional uint32 trim_right = 12 ;
}

message Result {
    // raw sequence or consensus
    required Read read = 1 ;

    // if this result is the consensus of multiple reads, those reads
    // can go here
    repeated Read member = 2 ;

    // alignments, if any
    repeated Hit hit = 3 ;

    // statistics/debug info, if any
    optional AlnStats aln_stats = 4 ;

    // difference to subsequent hits, if that ever comes to pass...
    // This is again Phred-scaled, so could be interpreted as some sort
    // of mapping quality.
    optional sint32 diff_to_next_species = 5 ;
    optional sint32 diff_to_next_order = 6 ;

	// if reads were joined into contigs, their number
	optional int32 num_reads = 7 ;
}

// We store multiple best hits, one per genome (where something like the
// nr database can also count as a 'genome').  Occasionally, we operate
// on the globally 'best' hit, which is simply the best one of the
// available ones.
message Hit {
    // globally unique name of the genome (used when sorting hits be
    // coordinate, can be used to locate the reference sequence if
    // present; if empty, the sequence name should be globally unique)
    required string genome_name = 1 ;

    // name of the subject sequence (== chromosome or similar)
    required string sequence = 2 ;

    // minimum position where any nucleotide aligns, zero-based
    // This is the position of the 5'-most base if on the forward
    // strand, the position of the 3'-most based if on the reverse strand
    required uint32 start_pos = 3 ;

    // length of alignment on reference sequence, negative if on the
    // reverse strand
    required sint32 aln_length = 4 ;

    // Score 
    // This is actually a penalty, and it represents the Phred-scaled
    // probability of this alignment being right.  Signed because we may
    // want to allow negative scores, too (though only if the scale ever
    // changes).  Optional, because majority sequences won't have a
    // sensible score.
    optional sint32 score = 5 ;

    // E-value (because it's customary to have one)
    optional float evalue = 6 ;

    // Alignment as (binary near-equivalent of) a CIGAR line
	// The low four bits encode the operation as an enum, the rest
	// encodes the length.  This way, no real length restriction exists.
	// This encoding happens to be the same as that used by BAM, with
	// two extensions: A match of length 0 encodes for the seed center
	// and the Mismatch operation is equivalent to the Match operation,
	// but signifies that the sequences actually differ.
	enum Operation {
		Match = 0 ;
		Insert = 1 ;
		Delete = 2 ;
		Skip = 3 ; 		// unused
		SoftClip = 4 ; 	// unused
		HardClip = 5 ; 	// unused
		Pad = 6 ;   	// unused
		Mismatch = 15 ; // not yet used
	} ;

    repeated uint32 cigar = 7 [packed=true] ;

    // Difference in bit score to next best hit, to next best on
    // different chromosome, to next on different class of chromosomes,
    // if they exist.  Classes for this purpose are sex chromosomes,
    // autosomes and organelles.
    optional sint32 diff_to_next = 8 ;
    optional sint32 diff_to_next_chromosome = 9 ;
    optional sint32 diff_to_next_chromosome_class = 10 ;

    // taxids if known: most specific, species and order
    // An absent taxid means it's not known.
    optional int32 taxid = 15 ;
    optional int32 taxid_species = 14 ;
    optional int32 taxid_order = 13 ;
}

// statistics about alignment, collected for debugging purposes
message AlnStats {
    // Reason we arrived at this result
    optional Reason reason = 1 [ default = aligned ] ;

    // Some statistics about the seeding process
    optional uint32 num_raw_seeds = 2 ;
    optional uint32 num_grown_seeds = 3 ;
    optional uint32 num_clumps = 4 ;
    optional uint32 num_useless = 5 ;

    // Some statistics about the alignment process
    optional uint32 open_nodes_after_alignment = 6 ;
    optional uint32 closed_nodes_after_alignment = 7 ;
    optional uint32 tracked_closed_nodes_after_alignment = 8 ;
}

// An output file is a magic number ("ANFO") followed by an Output
// message.  We read and write it one field at a time, though.
// XXX A chunked format with index might be better.
message Output {
    required Header header = 1 ;
    repeated OldResult oldresult = 2 ; // for hysteric raisins
    required Footer footer = 3 ;
    repeated Result result = 4 ;
}

